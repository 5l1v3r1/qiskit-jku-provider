/* 
DD-based simulator by JKU Linz, Austria

Developer: Alwin Zulehner, Robert Wille

With code from the QMDD implementation provided by Michael Miller (University of Victoria, Canada)
and Philipp Niemann (University of Bremen, Germany).

For more information, please visit http://iic.jku.at/eda/research/quantum_simulation

If you have any questions feel free to contact us using
alwin.zulehner@jku.at or robert.wille@jku.at

If you use the quantum simulator for your research, we would be thankful if you referred to it
by citing the following publication:

@article{zulehner2018simulation,
    title={Advanced Simulation of Quantum Computations},
    author={Zulehner, Alwin and Wille, Robert},
    journal={IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems (TCAD)},
    year={2018},
    eprint = {arXiv:1707.00865}
}


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <iostream>
#include <stdlib.h>
#include <set>
#include <unordered_map>
#include <boost/program_options.hpp>
#include <vector>
#include <gmp.h>
#include <mpreal.h>
#include <QASMsimulator.h>
#include <queue>
#include <chrono>
#include <QMDDcore.h>
#include <QMDDpackage.h>
#include <QMDDcomplex.h>

#include <Simulator.h>
//#include <QASMscanner.hpp>

using mpfr::mpreal;

using namespace std;


int main(int argc, char** argv) {

	namespace po = boost::program_options;
	po::options_description description("Allowed options");
	description.add_options()
	    ("help", "produce help message")
		("seed", po::value<unsigned long>(), "seed for random number generator")
	    ("simulate_qasm", po::value<string>()->implicit_value(""), "simulate a quantum circuit given in QPENQASM 2.0 format (if no file is given, the circuit is read from stdin)")
		("shots", po::value<unsigned int>(), "number of shots")
		("ps", "print simulation stats (applied gates, sim. time, and maximal size of the DD)")
		("display_statevector", "adds the state-vector to snapshots")
		("display_probabilities", "adds the probabilities of the basis states to snapshots")
		("precision", po::value<double>(), "two numbers are treated to be equal if their difference is smaller than this value")
	;

	po::variables_map vm;
	po::store(po::parse_command_line(argc, argv, description), vm);
	po::notify(vm);

	if (vm.count("help")) {
	    cout << description << "\n";
	    return 1;
	}

	unsigned long seed = time(NULL);
	if (vm.count("seed")) {
		seed = vm["seed"].as<unsigned long>();
	}

	srand(seed);

	QMDDinit(0);

	if (vm.count("precision")) {
#if VERBOSE
		std::cout << "Set precision to " << vm["precision"].as<double>() << std::endl;
#endif
		Ctol = mpreal(vm["precision"].as<double>());
	}

	Simulator* simulator;

	if (vm.count("simulate_qasm")) {
		string fname = vm["simulate_qasm"].as<string>();
		if(fname == "") {
			simulator = new QASMsimulator(vm.count("display_statevector"), vm.count("display_probabilities"));
		} else {
			simulator = new QASMsimulator(fname, vm.count("display_statevector"), vm.count("display_probabilities"));
		}
	} else {
		cout << description << "\n";
	    return 1;
	}

    auto t1 = chrono::high_resolution_clock::now();

	if(vm.count("shots")) {
		simulator->Simulate(vm["shots"].as<unsigned int>());
	} else {
		simulator->Simulate(1);
	}

	auto t2 = chrono::high_resolution_clock::now();
	chrono::duration<float> diff = t2-t1;

	delete simulator;

	if (vm.count("ps")) {
		cout << endl << "SIMULATION STATS: " << endl;
		cout << "  Number of applied gates: " << simulator->GetGatecount() << endl;
		cout << "  Simulation time: " << diff.count() << " seconds" << endl;
		cout << "  Maximal size of DD (number of nodes) during simulation: " << simulator->GetMaxActive() << endl;
	}

	return 0;
}
